

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar 27 13:52:20 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F1330
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    11                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    12  0000                     
    13                           ; Version 1.41
    14                           ; Generated 25/01/2017 GMT
    15                           ; 
    16                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC18F1330 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     _PORTB	set	3969
    48  0000                     _TRISB	set	3987
    49  0000                     _TRISA	set	3986
    50  0000                     _ADRESL	set	4035
    51  0000                     _ADRESH	set	4036
    52  0000                     _ADCON0	set	4034
    53  0000                     _ADCON1	set	4033
    54  0000                     _ADCON0bits	set	4034
    55  0000                     _GO_nDONE	set	32273
    56                           
    57                           ; #config settings
    58                           
    59                           	psect	cinit
    60  001F6E                     __pcinit:
    61                           	opt stack 0
    62  001F6E                     start_initialization:
    63                           	opt stack 0
    64  001F6E                     __initialization:
    65                           	opt stack 0
    66  001F6E                     end_of_initialization:
    67                           	opt stack 0
    68  001F6E                     __end_of__initialization:
    69                           	opt stack 0
    70  001F6E  0100               	movlb	0
    71  001F70  EFBF  F00F         	goto	_main	;jump to C main() function
    72                           
    73                           	psect	cstackCOMRAM
    74  000001                     __pcstackCOMRAM:
    75                           	opt stack 0
    76  000001                     ?_ADC_Read:
    77                           	opt stack 0
    78                           
    79                           ; 2 bytes @ 0x0
    80  000001                     	ds	2
    81  000003                     ??_ADC_Read:
    82                           
    83                           ; 1 bytes @ 0x2
    84  000003                     	ds	2
    85  000005                     ADC_Read@channel:
    86                           	opt stack 0
    87                           
    88                           ; 1 bytes @ 0x4
    89  000005                     	ds	1
    90  000006                     ??_main:
    91                           
    92                           ; 1 bytes @ 0x5
    93  000006                     	ds	2
    94  000008                     main@a:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x7
    98  000008                     	ds	2
    99                           
   100 ;;
   101 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   102 ;;
   103 ;; *************** function _main *****************
   104 ;; Defined at:
   105 ;;		line 28 in file "interrupt.c"
   106 ;; Parameters:    Size  Location     Type
   107 ;;		None
   108 ;; Auto vars:     Size  Location     Type
   109 ;;  a               2    7[COMRAM] unsigned int 
   110 ;; Return value:  Size  Location     Type
   111 ;;                  1    wreg      void 
   112 ;; Registers used:
   113 ;;		wreg, status,2, status,0, cstack
   114 ;; Tracked objects:
   115 ;;		On entry : 0/0
   116 ;;		On exit  : 0/0
   117 ;;		Unchanged: 0/0
   118 ;; Data sizes:     COMRAM   BANK0
   119 ;;      Params:         0       0
   120 ;;      Locals:         2       0
   121 ;;      Temps:          2       0
   122 ;;      Totals:         4       0
   123 ;;Total ram usage:        4 bytes
   124 ;; Hardware stack levels required when called:    1
   125 ;; This function calls:
   126 ;;		_ADC_Init
   127 ;;		_ADC_Read
   128 ;; This function is called by:
   129 ;;		Startup code after reset
   130 ;; This function uses a non-reentrant model
   131 ;;
   132                           
   133                           	psect	text0
   134  001F7E                     __ptext0:
   135                           	opt stack 0
   136  001F7E                     _main:
   137                           	opt stack 30
   138                           
   139                           ;interrupt.c: 30: unsigned int a;
   140                           ;interrupt.c: 31: TRISA = 0xFF;
   141                           
   142                           ;incstack = 0
   143  001F7E  6892               	setf	3986,c	;volatile
   144                           
   145                           ;interrupt.c: 32: TRISB = 0x00;
   146  001F80  0E00               	movlw	0
   147  001F82  6E93               	movwf	3987,c	;volatile
   148                           
   149                           ;interrupt.c: 34: ADC_Init();
   150  001F84  ECBA  F00F         	call	_ADC_Init	;wreg free
   151  001F88                     l687:
   152                           
   153                           ;interrupt.c: 37: {
   154                           ;interrupt.c: 38: a = ADC_Read(0);
   155  001F88  0E00               	movlw	0
   156  001F8A  ECDC  F00F         	call	_ADC_Read
   157  001F8E  C001  F008         	movff	?_ADC_Read,main@a
   158  001F92  C002  F009         	movff	?_ADC_Read+1,main@a+1
   159                           
   160                           ;interrupt.c: 39: PORTB = a;
   161  001F96  C008  FF81         	movff	main@a,3969	;volatile
   162                           
   163                           ;interrupt.c: 40: PORTB = a>>8;
   164  001F9A  5009               	movf	main@a+1,w,c
   165  001F9C  6E81               	movwf	3969,c	;volatile
   166                           
   167                           ;interrupt.c: 41: _delay((unsigned long)((100)*(8000000/4000.0)));
   168  001F9E  0E02               	movlw	2
   169  001FA0  6E07               	movwf	(??_main+1)& (0+255),c
   170  001FA2  0E04               	movlw	4
   171  001FA4  6E06               	movwf	??_main& (0+255),c
   172  001FA6  0EBA               	movlw	186
   173  001FA8                     u57:
   174  001FA8  2EE8               	decfsz	wreg,f,c
   175  001FAA  D7FE               	bra	u57
   176  001FAC  2E06               	decfsz	??_main& (0+255),f,c
   177  001FAE  D7FC               	bra	u57
   178  001FB0  2E07               	decfsz	(??_main+1)& (0+255),f,c
   179  001FB2  D7FA               	bra	u57
   180  001FB4  D000               	nop2	
   181                           
   182                           ;interrupt.c: 42: }while(1);
   183  001FB6  D7E8               	goto	l687
   184  001FB8                     __end_of_main:
   185                           	opt stack 0
   186                           wreg	equ	0xFE8
   187                           
   188 ;; *************** function _ADC_Read *****************
   189 ;; Defined at:
   190 ;;		line 15 in file "interrupt.c"
   191 ;; Parameters:    Size  Location     Type
   192 ;;  channel         1    wreg     unsigned char 
   193 ;; Auto vars:     Size  Location     Type
   194 ;;  channel         1    4[COMRAM] unsigned char 
   195 ;; Return value:  Size  Location     Type
   196 ;;                  2    0[COMRAM] unsigned int 
   197 ;; Registers used:
   198 ;;		wreg, status,2, status,0
   199 ;; Tracked objects:
   200 ;;		On entry : 0/0
   201 ;;		On exit  : 0/0
   202 ;;		Unchanged: 0/0
   203 ;; Data sizes:     COMRAM   BANK0
   204 ;;      Params:         2       0
   205 ;;      Locals:         1       0
   206 ;;      Temps:          2       0
   207 ;;      Totals:         5       0
   208 ;;Total ram usage:        5 bytes
   209 ;; Hardware stack levels used:    1
   210 ;; This function calls:
   211 ;;		Nothing
   212 ;; This function is called by:
   213 ;;		_main
   214 ;; This function uses a non-reentrant model
   215 ;;
   216                           
   217                           	psect	text1
   218  001FB8                     __ptext1:
   219                           	opt stack 0
   220  001FB8                     _ADC_Read:
   221                           	opt stack 30
   222                           
   223                           ;incstack = 0
   224                           ;ADC_Read@channel stored from wreg
   225  001FB8  6E05               	movwf	ADC_Read@channel,c
   226                           
   227                           ;interrupt.c: 17: if(channel > 7)
   228  001FBA  0E07               	movlw	7
   229  001FBC  6405               	cpfsgt	ADC_Read@channel,c
   230  001FBE  D005               	goto	l671
   231                           
   232                           ;interrupt.c: 18: return 0;
   233  001FC0  0E00               	movlw	0
   234  001FC2  6E02               	movwf	?_ADC_Read+1,c
   235  001FC4  0E00               	movlw	0
   236  001FC6  6E01               	movwf	?_ADC_Read,c
   237  001FC8  0012               	return	
   238  001FCA                     l671:
   239                           
   240                           ;interrupt.c: 20: ADCON0 &= 0xC5;
   241  001FCA  0EC5               	movlw	197
   242  001FCC  16C2               	andwf	4034,f,c	;volatile
   243                           
   244                           ;interrupt.c: 21: ADCON0 |= channel<<3;
   245  001FCE  3805               	swapf	ADC_Read@channel,w,c
   246  001FD0  42E8               	rrncf	wreg,f,c
   247  001FD2  0BF8               	andlw	248
   248  001FD4  12C2               	iorwf	4034,f,c	;volatile
   249                           
   250                           ;interrupt.c: 22: _delay((unsigned long)((2)*(8000000/4000.0)));
   251  001FD6  0E06               	movlw	6
   252  001FD8  6E03               	movwf	??_ADC_Read& (0+255),c
   253  001FDA  0E30               	movlw	48
   254  001FDC                     u67:
   255  001FDC  2EE8               	decfsz	wreg,f,c
   256  001FDE  D7FE               	bra	u67
   257  001FE0  2E03               	decfsz	??_ADC_Read& (0+255),f,c
   258  001FE2  D7FC               	bra	u67
   259  001FE4  D000               	nop2	
   260                           
   261                           ;interrupt.c: 23: GO_nDONE = 1;
   262  001FE6  82C2               	bsf	4034,1,c	;volatile
   263  001FE8                     l28:
   264  001FE8  B2C2               	btfsc	4034,1,c	;volatile
   265  001FEA  D7FE               	goto	l28
   266                           
   267                           ;interrupt.c: 25: return ((ADRESH<<8)+ADRESL);
   268  001FEC  50C4               	movf	4036,w,c	;volatile
   269  001FEE  6E04               	movwf	(??_ADC_Read+1)& (0+255),c
   270  001FF0  6A03               	clrf	??_ADC_Read& (0+255),c
   271  001FF2  50C3               	movf	4035,w,c	;volatile
   272  001FF4  2403               	addwf	??_ADC_Read,w,c
   273  001FF6  6E01               	movwf	?_ADC_Read,c
   274  001FF8  0E00               	movlw	0
   275  001FFA  2004               	addwfc	??_ADC_Read+1,w,c
   276  001FFC  6E02               	movwf	?_ADC_Read+1,c
   277  001FFE  0012               	return	
   278  002000                     __end_of_ADC_Read:
   279                           	opt stack 0
   280                           wreg	equ	0xFE8
   281                           
   282 ;; *************** function _ADC_Init *****************
   283 ;; Defined at:
   284 ;;		line 9 in file "interrupt.c"
   285 ;; Parameters:    Size  Location     Type
   286 ;;		None
   287 ;; Auto vars:     Size  Location     Type
   288 ;;		None
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, status,2
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0
   298 ;;      Params:         0       0
   299 ;;      Locals:         0       0
   300 ;;      Temps:          0       0
   301 ;;      Totals:         0       0
   302 ;;Total ram usage:        0 bytes
   303 ;; Hardware stack levels used:    1
   304 ;; This function calls:
   305 ;;		Nothing
   306 ;; This function is called by:
   307 ;;		_main
   308 ;; This function uses a non-reentrant model
   309 ;;
   310                           
   311                           	psect	text2
   312  001F74                     __ptext2:
   313                           	opt stack 0
   314  001F74                     _ADC_Init:
   315                           	opt stack 30
   316                           
   317                           ;interrupt.c: 11: ADCON0bits.CHS = 00;
   318                           
   319                           ;incstack = 0
   320  001F74  0EF3               	movlw	-13
   321  001F76  16C2               	andwf	4034,f,c	;volatile
   322                           
   323                           ;interrupt.c: 12: ADCON1 = 0x00;
   324  001F78  0E00               	movlw	0
   325  001F7A  6EC1               	movwf	4033,c	;volatile
   326  001F7C  0012               	return		;funcret
   327  001F7E                     __end_of_ADC_Init:
   328                           	opt stack 0
   329  0000                     wreg	equ	0xFE8
   330                           wreg	equ	0xFE8
   331                           
   332                           	psect	rparam
   333  0000                     wreg	equ	0xFE8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      9       9
    BANK0           128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_ADC_Read

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      89
                                              5 COMRAM     4     4      0
                           _ADC_Init
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      44
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      9       9       1        7.1%
STACK                0      0       0       2        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
ABS                  0      0       0       5        0.0%
BIGRAM              FF      0       0       6        0.0%
DATA                 0      0       0       7        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar 27 13:52:20 2017

                     l28 1FE8                       u57 1FA8                       u67 1FDC  
                    l671 1FCA                      l687 1F88                      wreg 000FE8  
                   _main 1F7E         __end_of_ADC_Init 1F7E         __end_of_ADC_Read 2000  
                   start 0000             ___param_bank 000000                    ?_main 0001  
                  _PORTB 000F81                    _TRISA 000F92                    _TRISB 000F93  
                  main@a 0008          __initialization 1F6E             __end_of_main 1FB8  
                 ??_main 0006            __activetblptr 000000                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADRESH 000FC4                   _ADRESL 000FC3  
        ADC_Read@channel 0005                ?_ADC_Init 0001                ?_ADC_Read 0001  
             __accesstop 0080  __end_of__initialization 1F6E            ___rparam_used 000001  
         __pcstackCOMRAM 0001               ??_ADC_Init 0001               ??_ADC_Read 0003  
                __Hparam 0000                  __Lparam 0000                  __pcinit 1F6E  
                __ramtop 0100                  __ptext0 1F7E                  __ptext1 1FB8  
                __ptext2 1F74     end_of_initialization 1F6E        __size_of_ADC_Init 000A  
      __size_of_ADC_Read 0048      start_initialization 1F6E                 _ADC_Init 1F74  
               _ADC_Read 1FB8                 _GO_nDONE 007E11               _ADCON0bits 000FC2  
               __Hrparam 0000                 __Lrparam 0000            __size_of_main 003A  
